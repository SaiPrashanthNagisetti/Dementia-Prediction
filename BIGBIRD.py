# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EPDcOhN7BBJ2hQY9d-jm-eu9pY80swib
"""

from transformers import BigBirdForSequenceClassification, BigBirdTokenizer
import numpy as np
import pandas as pd
import torch
import torch.nn as nn
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import transformers
from transformers import AutoModel, AdamW, get_linear_schedule_with_warmup
import matplotlib.pyplot as plt

# specify GPU
device = torch.device("cuda")


tokenizer = BigBirdTokenizer.from_pretrained('google/bigbird-roberta-base')
model = BigBirdForSequenceClassification.from_pretrained('google/bigbird-roberta-base')

df = pd.read_csv("/content/dataset_train_updated.csv")
print(df.head())
texts = df['text'].tolist()
labels = df['class'].tolist()
import pandas as pd
import torch

# Load the test dataset
test_df = pd.read_csv("/content/dataset_test_updated.csv")

# Extract text and labels
test_texts = test_df['text'].tolist()
test_labels = test_df['class'].tolist()

df['class'].value_counts(normalize = True)

from sklearn.model_selection import train_test_split
train_texts, val_texts, train_labels, val_labels = train_test_split(texts, labels, test_size=.1)

train_encodings = tokenizer(train_texts, truncation=True, padding=True)
val_encodings = tokenizer(val_texts, truncation=True, padding=True)
# Tokenize the test dataset
test_encodings = tokenizer(test_texts, truncation=True, padding=True)

train_labels = torch.tensor(train_labels)
val_labels = torch.tensor(val_labels)
# Convert labels to tensors
test_labels = torch.tensor(test_labels)

# Test encodings and labels are ready for evaluation
print("Test data tokenized and labels converted to tensors.")

from torch.utils.data import DataLoader, Dataset
from transformers import AdamW

class TextClassificationDS(Dataset):
  def __init__(self, encodings, labels):
    self.encodings = encodings
    self.labels = labels

  def __len__(self):
    return len(self.labels)

  def __getitem__(self, idx):
    item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()}
    item['labels'] = torch.tensor(self.labels[idx])
    return item

train_dataset = TextClassificationDS(train_encodings, train_labels)
val_dataset = TextClassificationDS(val_encodings, val_labels)
test_dataset = TextClassificationDS(test_encodings, test_labels)

train_loader = DataLoader(train_dataset, batch_size=8, shuffle=True)

val_loader = DataLoader(val_dataset, batch_size=8, shuffle=False)
test_loader = DataLoader(test_dataset, batch_size=8, shuffle=False)

from transformers import Trainer, TrainingArguments, EvalPrediction, EarlyStoppingCallback
import torch
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt
from collections import Counter

# Training arguments
training_args = TrainingArguments(
    output_dir='./results',
    num_train_epochs=30,
    learning_rate=5e-5,
    weight_decay=0.01,
    evaluation_strategy="epoch",
    per_device_train_batch_size=16,
    logging_dir='./logs',
    save_strategy="epoch",
    save_total_limit=2,
    logging_steps=10,                # Log every 10 steps to get frequent logs
    load_best_model_at_end=True,     # Load the best model when finished training
    metric_for_best_model="eval_loss",  # Use validation loss to track the best model
    greater_is_better=False,         # Since we're tracking loss, lower is better
)

# Check data balance
train_label_counts = Counter(train_dataset.labels)
print(f"Training label distribution: {train_label_counts}")

# Initialize Trainer
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=val_dataset,
    callbacks=[EarlyStoppingCallback(early_stopping_patience=3)],  # Early stopping with patience of 3 epochs
)

# Train the model and collect logs for training and validation loss
train_output = trainer.train()

# Extract loss values
training_logs = trainer.state.log_history
train_loss = []
val_loss = []

# Collect training and validation losses from logs
for log in training_logs:
    if 'loss' in log:
        train_loss.append(log['loss'])
    if 'eval_loss' in log:
        val_loss.append(log['eval_loss'])

# Plot training and validation loss
plt.figure(figsize=(10, 6))
plt.plot(train_loss, label="Training Loss")
plt.plot(val_loss, label="Validation Loss")
plt.xlabel("Epochs")
plt.ylabel("Loss")
plt.title("Training vs Validation Loss")
plt.legend()
plt.show()

test_results = trainer.evaluate(test_dataset)
# Compute additional metrics on the test dataset
test_predictions = trainer.predict(test_dataset).predictions
test_preds = torch.argmax(torch.tensor(test_predictions), dim=-1).numpy()

# Calculate metrics
accuracy = accuracy_score(test_labels, test_preds)
precision = precision_score(test_labels, test_preds, average='binary', pos_label=1)
recall = recall_score(test_labels, test_preds, average='binary', pos_label=1)
f1 = f1_score(test_labels, test_preds, average='binary', pos_label=1)
conf_matrix = confusion_matrix(test_labels, test_preds, labels=[0, 1])

# Check logits to verify predictions are balanced
test_logits = trainer.predict(test_dataset).predictions
print("Sample logits:", test_logits[:10])

# Display results
print(f"Test Accuracy: {accuracy:.4f}")
print(f"Test Precision: {precision:.4f}")
print(f"Test Recall: {recall:.4f}")
print(f"Test F1 Score: {f1:.4f}")

# Plot confusion matrix
disp = ConfusionMatrixDisplay(confusion_matrix=conf_matrix, display_labels=["Dementia (0)", "Control (1)"])
plt.figure(figsize=(8, 6))
disp.plot(cmap=plt.cm.Blues, values_format='d')
plt.title("Confusion Matrix")
plt.show()